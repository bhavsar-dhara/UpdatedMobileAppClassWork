package edu.neu.madcourse.dharabhavsar.utils.firebaseconn;

import android.content.Context;
import android.content.SharedPreferences;
import android.util.Log;

import com.firebase.client.DataSnapshot;
import com.firebase.client.Firebase;
import com.firebase.client.FirebaseError;
import com.firebase.client.Query;
import com.firebase.client.ValueEventListener;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Random;

import edu.neu.madcourse.dharabhavsar.model.communication.GameData;
import edu.neu.madcourse.dharabhavsar.model.communication.UserData;
import edu.neu.madcourse.dharabhavsar.utils.Constants;

/**
 * Created by derylrodrigues on 3/4/16.
 */
public class RemoteClient {

    private static final String TAG = "RemoteClient";
    private static boolean isDataChanged = false;
    private Context mContext;
    private HashMap<String, String> fireBaseData = new HashMap<String, String>();
    SharedPreferences prefs;
    private UserData user = new UserData();
    private HashMap<String, UserData> fireBaseUserData = new HashMap<String, UserData>();
    private HashMap<String, UserData> fireBaseRandomUserData = new HashMap<String, UserData>();
    private HashMap<String, UserData> fireBaseSelectedUserData = new HashMap<String, UserData>();
    private HashMap<String, GameData> fireBaseGameData = new HashMap<String, GameData>();
    private static boolean isRandomDataChanged = false;
    private int randomInt;

    public RemoteClient(Context mContext)
    {
        this.mContext = mContext;
        Firebase.setAndroidContext(mContext);
//        Firebase.getDefaultConfig().setLogLevel(Logger.Level.DEBUG);
        prefs = mContext.getSharedPreferences
                (RemoteClient.class.getSimpleName(), Context.MODE_PRIVATE);
    }


    public void saveValue(String key, String value) {
        Firebase ref = new Firebase(Constants.FIREBASE_DB);
        Firebase usersRef = ref.child(key);
        usersRef.setValue(value, new Firebase.CompletionListener() {
            @Override
            public void onComplete(FirebaseError firebaseError, Firebase firebase) {
                if (firebaseError != null) {
                    Log.d(TAG, "Data could not be saved. " + firebaseError.getMessage());
                } else {
                    Log.d(TAG, "Data saved successfully.");
                }
            }
        });
    }

    public boolean isDataFetched()
    {
        return isDataChanged;
    }

    public boolean isRandomDataFetched()
    {
        return isRandomDataChanged;
    }

    public String getValue(String key)
    {
        return fireBaseData.get(key);
    }

    public void fetchValue(String key) {

        Log.d(TAG, "Get Value for Key - " + key);
        Firebase ref = new Firebase(Constants.FIREBASE_DB + key);
        Query queryRef = ref.orderByKey();
        queryRef.addListenerForSingleValueEvent(new ValueEventListener() {
            @Override
            public void onDataChange(DataSnapshot snapshot) {
                // snapshot contains the key and value
                isDataChanged = true;
                if (snapshot.getValue() != null) {
                    Log.d(TAG, "Data Received" + snapshot.getValue().toString());
                    // Adding the data to the HashMap
                    fireBaseData.put(snapshot.getKey(), snapshot.getValue().toString());
                } else {
                    Log.d(TAG, "Data Not Received");
                    fireBaseData.put(snapshot.getKey(), null);
                }
            }

            @Override
            public void onCancelled(FirebaseError firebaseError) {
                Log.e(TAG, firebaseError.getMessage());
                Log.e(TAG, firebaseError.getDetails());
            }
        });
    }

//    code to save, update and retrieve userData
    public void saveUserData(UserData value) {
        Firebase ref = new Firebase(Constants.FIREBASE_DB);
        Firebase usersRef = ref.child(Constants.USER_DATA);
        Firebase newUserRef = usersRef.push();
        newUserRef.setValue(value, new Firebase.CompletionListener() {
            @Override
            public void onComplete(FirebaseError firebaseError, Firebase firebase) {
                if (firebaseError != null) {
                    Log.d(TAG, "Data could not be saved. " + firebaseError.getMessage());
                } else {
                    Log.d(TAG, "Data saved successfully.");
                }
            }
        });
        // Get the unique ID generated by push() - adding it to SharedPrefrences
        String uniqueUserId = newUserRef.getKey();
        Log.e(TAG, "uniqueUserId = " + uniqueUserId);
        SharedPreferences.Editor editor = prefs.edit();
        editor.putString(Constants.USER_UNIQUE_KEY, uniqueUserId);
        editor.commit();
        String userKey = prefs.getString(Constants.USER_UNIQUE_KEY, "");
        Log.e(TAG, "in prefs, userKey = " + userKey);
    }

    public void updateUserData(UserData value) {
        Firebase ref = new Firebase(Constants.FIREBASE_DB);
//        TODO may not work properly correct the user unique key
        Firebase usersRef = ref.child(Constants.USER_DATA).child(Constants.USER_UNIQUE_KEY);
        usersRef.setValue(value);
    }

    public void fetchUserData(String key, final String userId) {
        Log.e(TAG, "Get Value for Key - " + userId);
        Firebase ref = new Firebase(Constants.FIREBASE_DB);
//        Firebase ref = new Firebase(FIREBASE_DB + key);
        Firebase usersRef = ref.child(key);
        Query queryRef = usersRef.orderByKey();
//        Query queryRef = ref.orderByKey();
        queryRef.addListenerForSingleValueEvent(new ValueEventListener() {
            @Override
            public void onDataChange(DataSnapshot snapshot) {
                isDataChanged = true;
                // snapshot contains the key and value
                if (snapshot.getValue() != null) {
                    Log.e(TAG, "There are " + snapshot.getChildrenCount() + " users");
                    // Adding the data to the HashMap
                    for (DataSnapshot postSnapshot : snapshot.getChildren()) {
                        if (postSnapshot.getKey().equals(userId)) {
                            user = postSnapshot.getValue(UserData.class);
                            Log.e(TAG, user.getUserId() + " - " + user.getUserName()
                                    + " - " + user.getUserCombineBestScore()
                                    + " - " + user.getUserIndividualBestScore());
                            fireBaseUserData.put(userId, user);
                        }
                    }
                } else {
                    Log.e(TAG, "Data Not Received");
                    fireBaseUserData.put(userId, null);
                }
            }

            @Override
            public void onCancelled(FirebaseError firebaseError) {
                Log.e(TAG, firebaseError.getMessage());
                Log.e(TAG, firebaseError.getDetails());
            }
        });
    }

    public UserData getUserData(String userId) {
        return (fireBaseUserData.get(userId));
    }

//    code to store gameData
    public void saveGameData(GameData value) {
//        TODO saving game data for both the plays
        Firebase ref = new Firebase(Constants.FIREBASE_DB);
        Firebase gameRef = ref.child(Constants.GAME_DATA);
        Firebase newGameRef = gameRef.push();
        newGameRef.setValue(value, new Firebase.CompletionListener() {
            @Override
            public void onComplete(FirebaseError firebaseError, Firebase firebase) {
                if (firebaseError != null) {
                    Log.d(TAG, "Data could not be saved. " + firebaseError.getMessage());
                } else {
                    Log.d(TAG, "Data saved successfully.");
                }
            }
        });
        // Get the unique ID generated by push() - adding it to SharedPrefrences
        String uniqueGameKey = newGameRef.getKey();
        Log.e(TAG, "uniqueGameKey = " + uniqueGameKey);
        SharedPreferences.Editor editor = prefs.edit();
        editor.putString(Constants.GAME_UNIQUE_KEY, uniqueGameKey);
        editor.commit();
        String gameKey = prefs.getString(Constants.GAME_UNIQUE_KEY, "");
        Log.e(TAG, "in prefs, gameKey = " + gameKey);
    }

    public void updateGameData(GameData value) {
        Firebase ref = new Firebase(Constants.FIREBASE_DB);
//        TODO may not work properly correct the game unique key
        Firebase usersRef = ref.child(Constants.GAME_DATA).child(Constants.GAME_UNIQUE_KEY);
        usersRef.setValue(value);
    }

    public void fetchGameData(String key, final String gameId) {
//        TODO game data fetching for async play + combine play
        Log.d(TAG, "Get Value for Key - " + key);
        Firebase ref = new Firebase(Constants.FIREBASE_DB + key);
        Query queryRef = ref.orderByKey();
        queryRef.addListenerForSingleValueEvent(new ValueEventListener() {
            @Override
            public void onDataChange(DataSnapshot snapshot) {
                // snapshot contains the key and value
                if (snapshot.getValue() != null) {
                    Log.d(TAG, "There are " + snapshot.getChildrenCount() + " number of games created.");
                    // Adding the data to the HashMap
                    for (DataSnapshot postSnapshot : snapshot.getChildren()) {
                        if (postSnapshot.getKey().equals(gameId)) {
                            String gameKey = postSnapshot.getKey();
                            GameData game = postSnapshot.getValue(GameData.class);
                            Log.e(TAG, game.getPlayer1ID() + " - " + game.isFirstCombatPlay()
                                    + " - " + game.isSecondCombatPlay()
                                    + " - " + game.getGameLetterState());
                            fireBaseGameData.put(gameKey, game);
                        }
                    }
                } else {
                    Log.d(TAG, "Data Not Received");
                    fireBaseGameData.put(gameId, null);
                }
            }

            @Override
            public void onCancelled(FirebaseError firebaseError) {
                Log.e(TAG, firebaseError.getMessage());
                Log.e(TAG, firebaseError.getDetails());
            }
        });
    }

    public GameData getGameData(String gameKey) {
        return (fireBaseGameData.get(gameKey));
    }

    public void fetchRandomUsers(final String key, final String userId) {
//        TODO users for 2player combat game
        Log.d(TAG, "Get Value for Key - " + key);
        Firebase ref = new Firebase(Constants.FIREBASE_DB + key);
        Query queryRef = ref.orderByKey();
        queryRef.addListenerForSingleValueEvent(new ValueEventListener() {
            @Override
            public void onDataChange(DataSnapshot snapshot) {
                isRandomDataChanged = true;
                // snapshot contains the key and value
                if (snapshot.getValue() != null) {
                    Log.d(TAG, "There are " + snapshot.getChildrenCount() + " number of users.");
                    // Adding the data to the HashMap
                    for (DataSnapshot postSnapshot : snapshot.getChildren()) {
                        if (!postSnapshot.getKey().equals(userId)) {
                            String randomUserKey = postSnapshot.getKey();
                            UserData user = postSnapshot.getValue(UserData.class);
                            if(!user.isChallengedGamePending()) {
                                fireBaseRandomUserData.put(randomUserKey, user);
                                Log.e(TAG, user.getUserId() + " - " + user.getUserName()
                                        + " - " + user.getUserCombineBestScore()
                                        + " - " + user.getUserIndividualBestScore()
                                        + " - " + user.getChallengedBy()
                                        + " - " + user.getTeamPlayerName()
                                        + " - " + user.isCombineGameRequest()
                                        + " - " + user.isChallengedGamePending());
                            }
                        }
                    }
                } else {
                    Log.d(TAG, "Data Not Received");
                    fireBaseRandomUserData.put(userId, null);
                }
            }

            @Override
            public void onCancelled(FirebaseError firebaseError) {
                Log.e(TAG, firebaseError.getMessage());
                Log.e(TAG, firebaseError.getDetails());
            }
        });
    }

    public HashMap<String, UserData> getFireBaseRandomUserData() {
        Random random = new Random();
        List<String> keys = new ArrayList<String>(fireBaseRandomUserData.keySet());
        String randomKey = keys.get( random.nextInt(keys.size()) );
        UserData value = fireBaseRandomUserData.get(randomKey);
        fireBaseSelectedUserData.put(randomKey, value);
        return fireBaseSelectedUserData;
    }

    public String getRandomUserKey() {
        Random generator = new Random();
        Object[] keys = fireBaseRandomUserData.keySet().toArray();
        randomInt = generator.nextInt(keys.length);
        Object randomKey = keys[generator.nextInt(randomInt)];
        return (String)randomKey;
    }

    public UserData getRandomUserData() {
        Object[] values = fireBaseRandomUserData.values().toArray();
        Object randomValue = values[randomInt];
        return (UserData)randomValue;
    }

    public void updateUser2Data(String key, UserData value) {
        Firebase ref = new Firebase(Constants.FIREBASE_DB);
//        TODO may not work properly correct the user unique key -- NEED TO PASS THE KEY OF USER 2
        Firebase usersRef = ref.child(Constants.USER_DATA).child(Constants.USER_UNIQUE_KEY);
        usersRef.setValue(value);
    }

    public void fetchAllUsers(String key, final String userId) {
//        TODO users for combine play
        Log.d(TAG, "Get Value for Key - " + key);
        Firebase ref = new Firebase(Constants.FIREBASE_DB + key);
        Query queryRef = ref.orderByKey();
        queryRef.addListenerForSingleValueEvent(new ValueEventListener() {
            @Override
            public void onDataChange(DataSnapshot snapshot) {
                // snapshot contains the key and value
                if (snapshot.getValue() != null) {
                    Log.d(TAG, "There are " + snapshot.getChildrenCount() + " blog posts");
                    // Adding the data to the HashMap
                    for (DataSnapshot postSnapshot : snapshot.getChildren()) {
                        if (postSnapshot.getKey().equals(userId)) {
                            UserData user = postSnapshot.getValue(UserData.class);
                            Log.e(TAG, user.getUserId() + " - " + user.getUserName()
                                    + " - " + user.getUserCombineBestScore()
                                    + " - " + user.getUserIndividualBestScore());
                        }
                    }
                } else {
                    Log.d(TAG, "Data Not Received");
                }
            }

            @Override
            public void onCancelled(FirebaseError firebaseError) {
                Log.e(TAG, firebaseError.getMessage());
                Log.e(TAG, firebaseError.getDetails());
            }
        });
    }

    public void fetchScoreBoardData(String key, final String userId) {
//        TODO score board data
        Log.d(TAG, "Get Value for Key - " + key);
        Firebase ref = new Firebase(Constants.FIREBASE_DB + key);
        Query queryRef = ref.orderByKey();
        queryRef.addListenerForSingleValueEvent(new ValueEventListener() {
            @Override
            public void onDataChange(DataSnapshot snapshot) {
                // snapshot contains the key and value
                if (snapshot.getValue() != null) {
                    Log.d(TAG, "There are " + snapshot.getChildrenCount() + " blog posts");
                    // Adding the data to the HashMap
                    for (DataSnapshot postSnapshot : snapshot.getChildren()) {
                        if (postSnapshot.getKey().equals(userId)) {
                            UserData user = postSnapshot.getValue(UserData.class);
                            Log.e(TAG, user.getUserId() + " - " + user.getUserName()
                                    + " - " + user.getUserCombineBestScore()
                                    + " - " + user.getUserIndividualBestScore());
                        }
                    }
                } else {
                    Log.d(TAG, "Data Not Received");
                }
            }

            @Override
            public void onCancelled(FirebaseError firebaseError) {
                Log.e(TAG, firebaseError.getMessage());
                Log.e(TAG, firebaseError.getDetails());
            }
        });
    }
}
